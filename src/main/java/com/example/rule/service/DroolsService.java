package com.example.rule.service;


import com.example.rule.entity.ProductEntity;
import com.example.rule.model.*;

import java.util.*;
import org.kie.api.runtime.KieContainer;
import org.kie.api.runtime.KieSession;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class DroolsService {
    @Autowired
    private KieContainer kieContainer;
    @Autowired
    private ProductService productService;

//    private IList<Promotion> promotionsCache;
    List<Promotion> promotions = new ArrayList<>();

    List<ProductDTO> products = new ArrayList<>();

    List<String> listIdProductInPRomotion = Arrays.asList("4241412000773", "4241412000773", "1073200001097", "4241412000773", "4241412000773", "4241412000773", "4241412000773", "1052846000428", "1052846000428", "4241412000773", "4241412000773", "4241412000773", "4241412000773", "4241412000773",
            "4241412000773", "4241412000773", "4241412000035", "4241412000035", "4241412000035", "4241412000035", "4241412000035", "1073200001027", "1073200001028", "1073200001029", "1073200001030", "1073200001031", "1073200001032", "1073200001093", "1073200001094", "1073200001099", "1073200001100",
            "1073200001101", "1073200001102", "1073200001103", "1073200001111", "1073200001112", "1073200001113", "1073200001116", "1073200001117", "1073200001118", "1073200001119", "1073200001120", "1073200001122", "1073200001126", "1073200001127", "1073200001128", "1073200001129", "1073200001130",
            "1073200001131", "1073200001132", "1475932000001", "1475932000002", "1475087000009", "1475087000045", "9252713000040", "9252713000041", "9252713000054", "9252713000055", "9252713000058", "9252713000059", "9252713000068", "9252713000069", "1052846000213", "1053379000025", "1052846000427",
            "1052846000465", "1053379000026", "1052846000428", "1052846000466", "1052846000613", "1052846000552", "1052846000534", "1052846000534", "9252834000403", "1193696000229", "8935049002109", "8935049002345", "8935049005582", "8935049005599", "9892845000325", "9892845000327", "9892845000326",
            "9892845000328", "4241412000035", "4241412000035", "4241412000035", "4241412000035", "4241412000035", "1475087000009", "1475087000045", "9252713000040", "9252713000041", "9252713000054", "9252713000055", "9252713000058", "9252713000059", "9252713000068", "9252713000069", "1475087000004",
            "1475087000091", "9252711000276", "9252711000277", "9252713000028", "9252713000032", "9252713000038", "9252713000051", "9252713000052", "9252713000053", "9252713000056", "9252713000057", "1073200001027", "1073200001028", "1073200001029", "1073200001030", "1073200001031", "1073200001032",
            "1073200001033", "1073200001034", "1073200001035", "1073200001036", "1073200001037", "1073200001038", "1073200001039", "1073200001040", "1073200001041", "1073200001042", "1073200001093", "1073200001094", "1073200001099", "1073200001100", "1073200001101", "1073200001102", "1073200001103",
            "1073200001111", "1073200001112", "1073200001113", "1073200001116", "1073200001117", "1073200001118", "1073200001119", "1073200001120", "1073200001122", "1073200001126", "1073200001127", "1073200001128", "1073200001129", "1073200001130", "1073200001131", "1073200001132", "1475932000001",
            "1475932000002", "1475913000006", "1475913000007", "1475913000008", "1475913000009", "1475913000010", "1475913000011", "1475913000012", "1475913000013", "1475913000014", "1475913000015", "1475913000016", "1475913000017", "1475913000018", "1475913000019", "1475913000020", "1475913000021",
            "1475913000022", "1475913000023", "1475913000024", "1475913000025", "1475913000026", "1475913000027", "1475913000028", "1475913000029", "1475913000030", "1475913000031", "1475913000032", "1475913000033", "1475913000034", "1475913000035", "1475913000036", "1475913000037", "1475913000038",
            "1475913000039", "1475913000040", "1475913000041", "1475913000042", "1475913000043", "1475913000044", "1475913000045", "1475920000047", "1475920000048", "1475920000049", "1475920000050", "1475920000051", "1475920000052", "1475920000053", "1475920000054", "1475920000055", "1475920000056",
            "1475935000005", "1475935000006", "1475935000007", "1475935000008", "1475935000009", "1475935000010", "1475935000011", "1475935000012", "1475935000013", "1475935000014", "1475935000015", "1475935000016", "1475935000017", "1475935000018", "1475935000019", "1475935000020", "1475935000021",
            "1475935000022", "1475935000023", "1475935000024", "1475935000025", "1475935000026", "1475935000027", "1475935000028", "1475935000029", "1475935000030", "1475935000031", "1475935000032", "1475935000033", "1475935000034", "1475935000035", "1475935000036", "1476080000004", "1476080000005",
            "1476080000006", "1476080000007", "1476080000008", "1476080000009", "1476080000010", "1476080000011", "1476080000012", "1476080000013", "1476080000014", "1476080000015", "1476080000016", "1476080000017", "1476080000018", "1476080000019", "1476080000020", "1476080000021", "1476080000022",
            "1476080000023", "1476080000024", "1476080000025", "1476080000027", "1476080000028", "1052846000427", "1053379000026", "1052846000427", "1053379000026", "1052846000428", "1052846000613", "1052846000613", "1193693000538", "1193696000683", "1193696000684", "1193696000711", "1193696000712",
            "1193698000331", "1052846000630", "1052846000628", "1052846000630", "1052846000628", "1052846000213", "0161031000311", "0161031000312", "0161031000313", "0161031000314", "0163346000454", "0163346000455", "1193693000538", "1193696000683", "1193696000684", "1193696000685", "1193696000711",
            "1193696000712", "1193696000747", "1193698000331", "1052846000613", "0161031000308", "1475086000001", "1475086000002", "1475086000056", "1475087000001", "1475087000002", "1475087000003", "1475087000091", "1475087000106", "1475087000108", "8934755030505", "8934755051081", "8934755051098",
            "8934755051111", "8934755051128", "8934755051135", "8934755051142", "8934755051159", "9252711000083", "9252711000084", "9252711000228", "9252711000233", "9252711000250", "9252711000272", "9252711000273", "9252711000274", "9252711000275", "9252711000276", "9252711000277", "9252711000291",
            "9252713000028", "9252713000032", "9252713000038", "9252713000051", "9252713000052", "9252713000053", "9252713000056", "9252713000057", "1475086000001", "1475086000002", "1475086000056", "1475087000001", "1475087000002", "1475087000003", "1475087000091", "1475087000106", "1475087000108",
            "8934755030505", "8934755051081", "8934755051098", "8934755051111", "8934755051128", "8934755051135", "8934755051142", "8934755051159", "9252711000079", "9252711000080", "9252711000081", "9252711000082", "9252711000083", "9252711000084", "9252711000228", "9252711000233", "9252711000250",
            "9252711000272", "9252711000273", "9252711000274", "9252711000275", "9252711000276", "9252711000277", "9252711000291", "9252713000028", "9252713000032", "9252713000038", "9252713000051", "9252713000052", "9252713000053", "9252713000056", "9252713000057", "0161031000308", "1073200001027",
            "1073200001028", "1073200001029", "1073200001030", "1073200001031", "1073200001032", "1073200001033", "1073200001034", "1073200001035", "1073200001036", "1073200001037", "1073200001038", "1073200001039", "1073200001040", "1073200001041", "1073200001042", "1073200001099", "1073200001100",
            "1073200001101", "1073200001102", "1073200001103", "1073200001111", "1073200001112", "1073200001113", "1073200001116", "1073200001117", "1073200001118", "1073200001119", "1073200001120", "1073200001122", "1073200001126", "1073200001127", "1073200001128", "1073200001129", "1073200001130",
            "1073200001131", "1073200001132", "1475932000001", "1475932000002", "1495930000002", "1495930000003", "1495930000004", "1495931000002", "1495931000003"
    );

    List<Integer> listProfitProduct = Arrays.asList(84000, 84000, 33600, 105000, 105000, 126000, 126000, 180000, 150000, 210000, 336000, 462000, 63000, 63000, 42000, 42000, 102000, 153000, 204000, 255000, 306000, 14200, 18800, 17000, 28200, 26000, 16200, 12000, 15800, 14600, 20400, 27600, 27600, 13800, 26800, 26800, 26800, 20400, 20400, 20400, 10200, 12800, 14600, 26800, 26800, 21400, 21400, 26800, 26800, 40600, 27600, 17600, 41160, 47760, 41160, 41160, 41160, 41160, 41160, 41160, 41160, 41160, 82400, 65000, 65000, 65000, 65000, 65000, 65000, 65000, 250000, 35000, 55000, 12800, 25000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 102000, 153000, 204000, 255000, 306000, 34300, 39800, 34300, 34300, 34300, 34300, 34300, 34300, 34300, 34300, 34300, 35700, 35700, 35700, 35700, 35700, 35700, 35700, 35700, 35700, 35700, 35700, 42600, 56400, 51000, 84600, 78000, 48600, 13200, 90000, 15600, 96000, 34200, 52200, 70800, 39000, 60600, 89400, 36000, 47400, 43800, 61200, 82800, 82800, 41400, 80400, 80400, 80400, 61200, 61200, 61200, 30600, 38400, 43800, 80400, 80400, 64200, 64200, 80400, 80400, 121800, 82800, 52800, 38400, 38400, 38400, 38400, 41600, 41600, 41600, 41600, 41600, 41600, 41600, 41600, 44400, 44400, 44400, 44400, 47600, 47600, 47600, 47600, 50400, 50400, 50400, 50400, 40000, 40000, 40000, 40000, 42800, 42800, 42800, 42800, 43600, 43600, 43600, 43600, 46800, 46800, 46800, 50000, 62400, 62400, 62400, 62400, 62400, 62400, 71600, 71600, 71600, 71600, 34800, 34800, 34800, 34800, 37600, 37600, 37600, 37600, 34800, 34800, 34800, 34800, 37600, 37600, 37600, 37600, 29600, 29600, 29600, 29600, 32400, 32400, 32400, 32400, 42400, 42400, 42400, 42400, 45200, 45200, 45200, 45200, 68400, 68400, 68400, 68400, 68400, 68400, 53600, 53600, 53600, 53600, 53600, 53600, 53600, 53600, 31600, 31600, 31600, 31600, 31600, 31600, 31600, 31600, 71600, 71600, 65000, 65000, 180000, 180000, 65000, 65000, 180000, 20000, 20000, 20000, 20000, 20000, 20000, 100000, 100000, 200000, 200000, 82400, 230000, 230000, 230000, 230000, 230000, 230000, 35000, 35000, 35000, 35000, 35000, 35000, 35000, 35000, 150000, 545000, 47250, 47250, 47100, 28950, 33000, 40650, 53550, 44400, 44400, 18000, 33000, 33000, 33000, 40650, 40650, 40650, 40650, 21600, 29100, 47250, 47250, 29100, 61800, 61800, 61800, 61800, 53550, 53550, 61800, 53550, 53550, 53550, 53550, 53550, 53550, 53550, 53550, 47250, 47250, 47100, 28950, 33000, 40650, 53550, 44400, 44400, 18000, 33000, 33000, 33000, 40650, 40650, 40650, 40650, 56100, 56100, 56100, 56100, 21600, 29100, 47250, 47250, 29100, 61800, 61800, 61800, 61800, 53550, 53550, 61800, 53550, 53550, 53550, 53550, 53550, 53550, 53550, 53550, 545000, 28400, 37600, 34000, 56400, 52000, 32400, 8800, 60000, 10400, 64000, 22800, 34800, 47200, 26000, 40400, 59600, 29200, 40800, 55200, 55200, 27600, 53600, 53600, 53600, 40800, 40800, 40800, 20400, 25600, 29200, 53600, 53600, 42800, 42800, 53600, 53600, 81200, 55200, 35200, 32800, 51200, 20400, 47600, 36800
    );



    List<Integer> quantityProductPromotion = Arrays.asList(4, 4, 4, 5, 5, 6, 6, 2, 2, 10, 16, 22, 3, 3, 2, 2, 2, 3, 4, 5, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 1, 1, 1, 3, 1, 2, 2, 1, 2, 2, 2, 2, 3, 3, 3, 3, 2, 3, 4, 5, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 3, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
    );

    List<Integer> listPriceProductPromotion  = Arrays.asList(184000, 184000, 56000, 184000, 184000, 184000, 184000, 829000, 829000, 184000, 184000, 184000, 184000, 184000, 184000, 184000, 463000, 463000, 463000, 463000, 463000, 71000, 94000, 85000, 141000, 130000, 81000, 60000, 79000, 73000, 102000, 138000, 138000, 69000, 134000, 134000, 134000, 102000, 102000, 102000, 51000, 64000, 73000, 134000, 134000, 107000, 107000, 134000, 134000, 203000, 138000, 88000, 343000, 398000, 343000, 343000, 343000, 343000, 343000, 343000, 343000, 343000, 412000, 236000, 449000, 449000, 477000, 829000, 819000, 1162000, 565000, 462000, 462000, 64000, 273000, 241000, 329000, 366000, 518000, 367000, 344000, 467000, 522000, 463000, 463000, 463000, 463000, 463000, 343000, 398000, 343000, 343000, 343000, 343000, 343000, 343000, 343000, 343000, 343000, 357000, 357000, 357000, 357000, 357000, 357000, 357000, 357000, 357000, 357000, 357000, 71000, 94000, 85000, 141000, 130000, 81000, 22000, 150000, 26000, 160000, 57000, 87000, 118000, 65000, 101000, 149000, 60000, 79000, 73000, 102000, 138000, 138000, 69000, 134000, 134000, 134000, 102000, 102000, 102000, 51000, 64000, 73000, 134000, 134000, 107000, 107000, 134000, 134000, 203000, 138000, 88000, 96000, 96000, 96000, 96000, 104000, 104000, 104000, 104000, 104000, 104000, 104000, 104000, 111000, 111000, 111000, 111000, 119000, 119000, 119000, 119000, 126000, 126000, 126000, 126000, 100000, 100000, 100000, 100000, 107000, 107000, 107000, 107000, 109000, 109000, 109000, 109000, 117000, 117000, 117000, 117000, 156000, 156000, 156000, 156000, 156000, 156000, 179000, 179000, 179000, 179000, 87000, 87000, 87000, 87000, 94000, 94000, 94000, 94000, 87000, 87000, 87000, 87000, 94000, 94000, 94000, 94000, 74000, 74000, 74000, 74000, 81000, 81000, 81000, 81000, 106000, 106000, 106000, 106000, 113000, 113000, 113000, 113000, 171000, 171000, 171000, 171000, 171000, 171000, 134000, 134000, 134000, 134000, 134000, 134000, 134000, 134000, 79000, 79000, 79000, 79000, 79000, 79000, 79000, 79000, 179000, 179000, 449000, 477000, 449000, 477000, 829000, 1162000, 1162000, 444000, 273000, 273000, 264000, 259000, 255000, 703000, 425000, 703000, 425000, 412000, 409000, 409000, 409000, 409000, 264000, 264000, 444000, 273000, 273000, 306000, 264000, 259000, 357000, 255000, 1162000, 500000, 315000, 315000, 314000, 193000, 220000, 271000, 357000, 296000, 296000, 120000, 220000, 220000, 220000, 271000, 271000, 271000, 271000, 144000, 194000, 315000, 315000, 194000, 412000, 412000, 412000, 412000, 357000, 357000, 412000, 357000, 357000, 357000, 357000, 357000, 357000, 357000, 357000, 315000, 315000, 314000, 193000, 220000, 271000, 357000, 296000, 296000, 120000, 220000, 220000, 220000, 271000, 271000, 271000, 271000, 374000, 374000, 374000, 374000, 144000, 194000, 315000, 315000, 194000, 412000, 412000, 412000, 412000, 357000, 357000, 412000, 357000, 357000, 357000, 357000, 357000, 357000, 357000, 357000, 500000, 71000, 94000, 85000, 141000, 130000, 81000, 22000, 150000, 26000, 160000, 57000, 87000, 118000, 65000, 101000, 149000, 73000, 102000, 138000, 138000, 69000, 134000, 134000, 134000, 102000, 102000, 102000, 51000, 64000, 73000, 134000, 134000, 107000, 107000, 134000, 134000, 203000, 138000, 88000, 82000, 128000, 51000, 119000, 92000
    );



    List<Double> listCondition = Arrays.asList(
            3000000.0, 3000000.0, 5000000.0, 8000000.0, 249000.0, 300000.0, 300000.0, 300000.0, 300000.0,
            300000.0, 299000.0, 300000.0, 400000.0, 370000.0, 449000.0, 500000.0, 500000.0, 499000.0, 500000.0,
            599000.0, 800000.0, 1599000.0, 1500000.0, 99000.0, 100000.0, 99000.0, 100000.0, 100000.0, 100000.0,
            150000.0, 199000.0, 200000.0, 199000.0, 20000.0, 20000.0
    );
    List<Integer> listValue = Arrays.asList(
            120000, 90000, 150000, 80000, 30000, 75000, 65000, 60000, 50000, 45000,
            30000, 25000, 80000, 25000, 67000, 55000, 50000, 32000, 25000, 50000,
            100000, 188000, 120000, 30000, 15000, 12000, 10000, 10000, 5000, 15000,
            40000, 30000, 25000, 10000, 2000
    );

    TreeMap<Double, Double> ranges = new TreeMap<>();
    TreeMap<Integer, Integer> rangesItemPromotion = new TreeMap<>();
    public DroolsService() {

        ranges.put(0.0, 150.0);
        ranges.put(50000.0, 125.0);
        ranges.put(100000.0, 100.0);
        ranges.put(200000.0, 50.0);
        ranges.put(500000.0, 55.0);
        ranges.put(2000000.0, 60.0);
        ranges.put(5000000.0, 70.0);
        ranges.put(Double.MAX_VALUE, 70.0);


        rangesItemPromotion.put(0, 5);
        rangesItemPromotion.put(200000, 4);
        rangesItemPromotion.put(500000, 3);
        rangesItemPromotion.put(2000000, 2);
        rangesItemPromotion.put(5000000, 1);
        rangesItemPromotion.put(Integer.MAX_VALUE, 1);




        for(int i = 1; i <= listIdProductInPRomotion.size(); i++) {
            promotions.add(new Promotion(i,listIdProductInPRomotion.get(i - 1), listPriceProductPromotion.get(i - 1), "Kịch bản product " + i, "Mô tả kịch bản product " + i, new Date(), new Date(), listProfitProduct.get(i - 1), null , quantityProductPromotion.get(i - 1), "product"));

        }

        for (int i = 1; i <= listCondition.size(); i++) {
            promotions.add(new Promotion(i, null,0, "Kịch bản " + i, "Mô tả kịch bản " + i, new Date(), new Date(), listValue.get(i-1), listCondition.get(i-1) , null, "cart"));
        }

//        promotionsCache.addAll(promotions);
    }

    public Integer getTotalCart(CartItem order , List<ProductDTO> products){
        int total = 0;
        for(int i = 0 ; i< order.getProducts().size() ; i++){
            int finalI = i;
            ProductDTO found = products.stream().filter(p -> p.getProductId().equals(order.getProducts().get(finalI).getProductId())).toList().get(0);
            total+= found.getPrice().intValue() * order.getProducts().get(i).getQuantity();
        }
        return total;
    }
    public Response getSuggestPromotion(RequestSP applicantRequest) {

        products = productService.getAllProduct();

        ProductEntity found = null;
        Rate rate = new Rate();
        long start = System.currentTimeMillis();
        CartItem cart = applicantRequest.getCart();
        int totalPrice = this.getTotalCart(cart,products);

        if(applicantRequest.getProduct() != null && applicantRequest.getProduct().getProductId() != null && !applicantRequest.getProduct().getProductId().isEmpty() ){
            found = productService.findById(applicantRequest.getProduct().getProductId());
        }

        KieSession kieSession = kieContainer.newKieSession();
        kieSession.insert(cart);
        kieSession.insert(found);
        kieSession.insert(found);
        for (ProductCart product : cart.getProducts()) {
            kieSession.insert(product);
        }
        // Insert danh sách các khuyến mãi vào kieSession
        for (Promotion promotion : promotions) {
            kieSession.insert(promotion);
        }
        kieSession.setGlobal("rate",rate);

        kieSession.fireAllRules();
        kieSession.dispose();
        Response res = this.calculatePromotions(rate.getListRules(), totalPrice, cart.getProducts(), found);
        long end = System.currentTimeMillis();
        System.out.println("time in milliseconds TOTAL -> " + (end - start) + "ms");
        return res ;
    }
    public Response calculatePromotions(List<Promotion> promotionsFiltered, double amount,
                                        List<ProductCart> productsOrders, ProductEntity product) {
        List<PromotionAfterCalculation> potentialCartPromotions = new ArrayList<>();
        List<PromotionAfterCalculation> potentialItemPromotions = new ArrayList<>();
        double percentage = ranges.floorEntry(amount).getValue();
        // Filter cart promotions
        List<Promotion> cartPromotions = getPromotionsWithType("cart",promotionsFiltered);

        for (Promotion promotion : cartPromotions) {
            PromotionAfterCalculation promotionResult = new PromotionAfterCalculation();
            BeanUtils.copyProperties(promotion, promotionResult);

            calculateAndAddCartPromotion(promotion, promotionResult, potentialCartPromotions, amount, percentage);
        }
        // Filter item promotions
        List<Promotion> itemPromotions = getPromotionsWithType("product",promotionsFiltered);
        for (Promotion promotion : itemPromotions) {
            percentage =  rangesItemPromotion.floorEntry(promotion.getPriceProduct()).getValue();
            PromotionAfterCalculation promotionResult = new PromotionAfterCalculation();
            BeanUtils.copyProperties(promotion, promotionResult);

            if (product != null && promotion.getProductId().equals(product.getProductId())) {
                calculateAndAddItemPromotion(promotion, promotionResult , 1 , potentialItemPromotions , percentage);
            }

            for (ProductCart p : productsOrders) {
                if (promotion.getProductId().equals(p.getProductId())) {
                    calculateAndAddItemPromotion(promotion, promotionResult ,p.getQuantity(), potentialItemPromotions , percentage);
                }
            }
        }

        sortPromotions(potentialCartPromotions);
        sortPromotions(potentialItemPromotions);

        return new Response(potentialCartPromotions, potentialItemPromotions);
    }

    private void calculateAndAddCartPromotion(Promotion promotion, PromotionAfterCalculation promotionResult,
                                              List<PromotionAfterCalculation> potentialCartPromotions , double amount , double percentage) {
        Double remainingAmount = promotion.getConditionTotalCart() - amount;

        if (remainingAmount > 0 && ( remainingAmount.compareTo(amount * ( percentage / 100 )) < 0 || promotion.getConditionTotalCart() <= 200000.0)) {
            double result = this.formulaPromotion(promotion.getValue(), remainingAmount);
            promotionResult.setResult(result);
            promotionResult.setTienmuathem(remainingAmount);
            potentialCartPromotions.add(promotionResult);
        }
    }

    private void calculateAndAddItemPromotion(Promotion promotion, PromotionAfterCalculation promotionResult,int quantity,
                                              List<PromotionAfterCalculation> potentialItemPromotions, double percentage) {

        int conditionItem = (int) (percentage * promotion.getPriceProduct());
        double remainingAmount = (promotion.getConditionQuantity() * promotion.getPriceProduct()) - quantity* promotion.getPriceProduct();

        if (remainingAmount > 0 && remainingAmount <= conditionItem) {
            double result = this.formulaPromotion(promotion.getValue(), remainingAmount);
            promotionResult.setResult(result);
            promotionResult.setSoLuongMuaThem(promotion.getConditionQuantity() - quantity);
            potentialItemPromotions.add(promotionResult);
        }
    }

    private void sortPromotions(List<PromotionAfterCalculation> promotions) {
        promotions.sort(Comparator.comparing(PromotionAfterCalculation::getResult).reversed());
    }

    public List<Promotion> getPromotionsWithType(String type, List<Promotion> promotions) {
        return promotions.stream().filter(promotion -> promotion.getType().equals(type)).toList();
    }

    public Double formulaPromotion(int profit, double remainingAmount) {
        return Math.log(profit) - 3*Math.log(remainingAmount);
    }
}
